networks:
  stack:
  proxy:
    external: true

services:
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.6.1}
    container_name: ${CONTAINER_SERVER_NAME:-authentik_server}
    hostname: ${HOSTNAME}
    restart: unless-stopped
    command: server
    depends_on:
      - db
      - redis
    environment:
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:-AUTHENTIK_SECRET_KEY is missing}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=false
      - AUTHENTIK_LISTEN__HTTP=${AUTHENTIK_LISTEN__HTTP:-${AUTHENTIK_LISTEN__HTTP_HOST:-0.0.0.0}:${AUTHENTIK_LISTEN__HTTP_PORT:-9000}}
      #- AUTHENTIK_LISTEN__HTTPS=${AUTHENTIK_LISTEN__HTTPS:-${AUTHENTIK_LISTEN__HTTPS_HOST:-0.0.0.0}:${AUTHENTIK_LISTEN__HTTPS_PORT:-9443}}
      #- AUTHENTIK_LISTEN__METRICS=${AUTHENTIK_LISTEN__METRICS:-${AUTHENTIK_LISTEN__METRICS_HOST:-0.0.0.0}:${AUTHENTIK_LISTEN__METRICS_PORT:-9300}}
      - AUTHENTIK_EMAIL__HOST=${SMTPHOST}
      - AUTHENTIK_EMAIL__PORT=${SMTPPORT}
      - AUTHENTIK_EMAIL__USERNAME=${SMTPUSER}
      - AUTHENTIK_EMAIL__PASSWORD=${SMTPPASS}
      - AUTHENTIK_EMAIL__USE_TLS=true
      - AUTHENTIK_EMAIL__USE_SSL=false
      - AUTHENTIK_EMAIL__TIMEOUT=10
      - AUTHENTIK_EMAIL__FROM=${SMTPFROM}
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=db
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRESQL__NAME:-authentik}
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRESQL__USER:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRESQL__PASSWORD:-Authentic-Key4-Pesky-Query-Language}
    volumes:
      - ${CONTAINER_SERVER_BASEPATH:-/opt/authentik}/media:/media
      - ${CONTAINER_SERVER_BASEPATH:-/opt/authentik}/custom-templates:/templates
    #ports:
    #  - ${AUTHENTIK_LISTEN__HTTP_PORT:-9000}:${AUTHENTIK_LISTEN__HTTP_PORT:-9000}
    #  - ${AUTHENTIK_LISTEN__HTTPS_PORT:-9443}:${AUTHENTIK_LISTEN__HTTPS_PORT:-9443}
    #  - ${AUTHENTIK_LISTEN__METRICS_PORT:-9300}:${AUTHENTIK_LISTEN__METRICS_PORT:-9300}
    networks:
      stack:
      proxy:
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.rtr-authentik.entrypoints=https
      - traefik.http.routers.rtr-authentik.rule=Host(`${TRAEFIK_SUBJECT_CN:?}`)
      - traefik.http.services.svc-authentik.loadbalancer.server.scheme=http
      - traefik.http.services.svc-authentik.loadbalancer.server.port=${AUTHENTIK_LISTEN__HTTP_PORT:-9000}
      - traefik.http.services.svc-authentik.loadbalancer.passHostHeader=true
      - traefik.http.routers.rtr-authentik.service=svc-authentik

  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.6.1}
    container_name: ${CONTAINER_WORKER_NAME:-authentik_worker}
    restart: unless-stopped
    command: worker
    environment:
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_POSTGRESQL__HOST=db
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_POSTGRESQL__NAME:-authentik}
      - AUTHENTIK_POSTGRESQL__USER=${AUTHENTIK_POSTGRESQL__USER:-authentik}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${AUTHENTIK_POSTGRESQL__PASSWORD:-Authentic-Key4-Pesky-Query-Language}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONTAINER_WORKER_BASEPATH:-${CONTAINER_SERVER_BASEPATH:-/opt/authentik}}/media:/media
      - ${CONTAINER_WORKER_BASEPATH:-${CONTAINER_SERVER_BASEPATH:-/opt/authentik}}/certs:/certs
      - ${CONTAINER_WORKER_BASEPATH:-${CONTAINER_SERVER_BASEPATH:-/opt/authentik}}/custom-templates:/templates
    networks:
      stack:
    depends_on:
      - db
      - redis

  db:
    image: docker.io/library/postgres:16-alpine
    container_name: ${CONTAINER_DB_NAME:-authentik_db}
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${AUTHENTIK_POSTGRESQL__NAME:-authentik}
      - POSTGRES_USER=${AUTHENTIK_POSTGRESQL__USER:-authentik}
      - POSTGRES_PASSWORD=${AUTHENTIK_POSTGRESQL__PASSWORD:-Authentic-Key4-Pesky-Query-Language}
    volumes:
      - ${CONTAINER_DB_BASEPATH:-${CONTAINER_SERVER_BASEPATH:-/opt/authentik}/db}:/var/lib/postgresql/data
    networks:
      stack:
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready
        - --dbName=$${POSTGRES_DB}
        - --username=$${POSTGRES_USER}
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  redis:
    image: docker.io/library/redis:alpine
    container_name: ${CONTAINER_REDIS_NAME:-authentik_redis}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    volumes:
      - ${CONTAINER_REDIS_BASEPATH:-${CONTAINER_SERVER_BASEPATH:-/opt/authentik}/redis}:/data
    networks:
      stack:
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping | grep PONG
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
