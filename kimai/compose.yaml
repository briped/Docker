networks:
  stack:
  proxy:
    external: true

services:
  kimai:
    # https://www.kimai.org/documentation/docker.html
    image: kimai/kimai2:latest
    container_name: kimai
    hostname: ${HOSTNAME}
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ${CONTAINER_BASEPATH:-/opt/kimai}/public:/opt/kimai/public
      - ${CONTAINER_BASEPATH:-/opt/kimai}/data:/opt/kimai/var/data
    networks:
      stack:

  db:
    image: mariadb
    container_name: kimai_db
    hostname: ${HOSTNAME}
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ${CONTAINER_BASEPATH:-/opt/kimai}/db:/var/lib/mysql
    networks:
      stack:
    healthcheck:
      test:
        - CMD
        - healthcheck.sh
        - --connect
        - --innodb_initialized
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: kimai_web
    hostname: ${CONTAINER_HOSTNAME:-${HOSTNAME}}
    restart: unless-stopped
    depends_on:
      - kimai
    env_file:
      - .env
    volumes:
      - ${CONTAINER_BASEPATH:-/opt/kimai}/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ${CONTAINER_BASEPATH:-/opt/kimai}/public:/opt/kimai/public:ro
    #ports:
    #  - 80:80
    networks:
      stack:
      proxy:
    labels:
      - traefik.enable=false
      - traefik.docker.network=proxy
      - traefik.http.routers.rtr-kimai.entryPoints=https
      - traefik.http.routers.rtr-kimai.rule=Host(`${TRAEFIK_SUBJECT_CN:?}`)
      - traefik.http.services.svc-kimai.loadBalancer.server.scheme=http
      - traefik.http.services.svc-kimai.loadBalancer.server.port=80
      - traefik.http.routers.rtr-kimai.service=svc-kimai