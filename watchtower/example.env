CONTAINER_NAME=watchtower
CONTAINER_HOSTNAME=AlternateHostname

### https://containrrr.dev/watchtower/arguments/
## Sets the time zone to be used by WatchTower's logs and the optional Cron scheduling argument (--schedule).
## If this environment variable is not set, Watchtower will use the default time zone: UTC.
TZ=Europe/Copenhagen

## Removes old images after updating.
## When this flag is specified, watchtower will remove the old image after restarting a container with a new image.
## Use this option to prevent the accumulation of orphaned images on your system as containers are updated.
WATCHTOWER_CLEANUP=true

## Removes anonymous volumes after updating.
## When this flag is specified, watchtower will remove all anonymous volumes from the container before restarting with a new image.
## Named volumes will not be removed!
#WATCHTOWER_REMOVE_VOLUMES=false

## Enable debug mode with verbose logging.
#WATCHTOWER_DEBUG=false

## Enable trace mode with very verbose logging. Caution: exposes credentials!
#WATCHTOWER_TRACE=false

## The maximum log level that will be written to STDERR (shown in docker log when used in a container).
#WATCHTOWER_LOG_LEVEL=info

## Sets what logging format to use for console output.
#WATCHTOWER_LOG_FORMAT=Auto # Auto, LogFmt, Pretty or JSON

## Disable ANSI color escape codes in log output.
#NO_COLOR=false

## Docker daemon socket to connect to.
## Can be pointed at a remote Docker host by specifying a TCP endpoint as "tcp://hostname:port".
#DOCKER_HOST=unix:///var/run/docker.sock

## The API version to use by the Docker client for connecting to the Docker daemon.
## The minimum supported version is 1.24.
#DOCKER_API_VERSION=1.24

## Will also include restarting containers.
#WATCHTOWER_INCLUDE_RESTARTING=false

## Will also include created and exited containers.
#WATCHTOWER_INCLUDE_STOPPED=false

## Start any stopped containers that have had their image updated.
## This argument is only usable with the --include-stopped argument.
#WATCHTOWER_REVIVE_STOPPED=false

## Poll interval (in seconds). This value controls how frequently watchtower will poll for new images.
## Either --schedule or a poll interval can be defined, but not both.
#WATCHTOWER_POLL_INTERVAL=86400

## Monitor and update containers that have a com.centurylinklabs.watchtower.enable label set to true.
## Do not Monitor and update containers that have com.centurylinklabs.watchtower.enable label set to false and no --label-enable argument is passed.
## Note that only one or the other (targeting by enable label) can be used at the same time to target containers.
WATCHTOWER_LABEL_ENABLE=true

## Monitor and update containers whose names are not in a given set of names.
## This can be used to exclude specific containers, when setting labels is not an option.
## The Comma- or space-separated string listed containers will be excluded even if they have the enable filter set to true.
#WATCHTOWER_DISABLE_CONTAINERS=""

## Will only monitor for new images, send notifications and invoke the pre-check/post-check hooks, but will not update the containers.
#WATCHTOWER_MONITOR_ONLY=false

## By default, arguments will take precedence over labels.
## This means that if you set WATCHTOWER_MONITOR_ONLY to true or use --monitor-only, a container with com.centurylinklabs.watchtower.monitor-only set to false will not be updated.
## If you set WATCHTOWER_LABEL_TAKE_PRECEDENCE to true or use --label-take-precedence, then the container will also be updated.
## This also apply to the no pull option. If you set WATCHTOWER_NO_PULL to true or use --no-pull, a container with com.centurylinklabs.watchtower.no-pull set to false will not pull the new image.
## If you set WATCHTOWER_LABEL_TAKE_PRECEDENCE to true or use --label-take-precedence, then the container will pull image
#WATCHTOWER_LABEL_TAKE_PRECEDENCE=false

## Do not restart containers after updating.
## This option can be useful when the start of the containers is managed by an external system such as systemd.
#WATCHTOWER_NO_RESTART=false

## Do not pull new images.
## When this flag is specified, watchtower will not attempt to pull new images from the registry. Instead it will only monitor the local image cache for changes.
## Use this option if you are building new images directly on the Docker host without pushing them to a registry.
#WATCHTOWER_NO_PULL=false

## Do not send a message after watchtower started. Otherwise there will be an info-level notification.
WATCHTOWER_NO_STARTUP_MESSAGE=true

## Run an update attempt against a container name list one time immediately and exit.
#WATCHTOWER_RUN_ONCE=false

## Runs Watchtower in HTTP API mode, only allowing image updates to be triggered by an HTTP request. For details see HTTP API.
#WATCHTOWER_HTTP_API_UPDATE=false

## Sets an authentication token to HTTP API requests. Can also reference a file, in which case the contents of the file are used.
#WATCHTOWER_HTTP_API_TOKEN=false

## Keep running periodic updates if the HTTP API mode is enabled, otherwise the HTTP API would prevent periodic polls.
#WATCHTOWER_HTTP_API_PERIODIC_POLLS=false

## Enables a metrics endpoint, exposing prometheus metrics via HTTP. See Metrics for details.
WATCHTOWER_HTTP_API_METRICS=true

## Update containers that have a com.centurylinklabs.watchtower.scope label set with the same value as the given argument.
## This enables running multiple instances.
#WATCHTOWER_SCOPE=

## Cron expression in 6 fields (rather than the traditional 5) which defines when and how often to check for new images.
## Either --interval or the schedule expression can be defined, but not both.
## An example: --schedule "0 0 4 * * *"
WATCHTOWER_SCHEDULE="0 0 4 * * *"

## Restart one image at time instead of stopping and starting all at once.
## Useful in conjunction with lifecycle hooks to implement zero-downtime deploy.
WATCHTOWER_ROLLING_RESTART=true

## Timeout before the container is forcefully stopped.
## When set, this option will change the default (10s) wait time to the given value.
## An example: --stop-timeout 30s will set the timeout to 30 seconds.
WATCHTOWER_TIMEOUT=30s

## Use TLS when connecting to the Docker socket and verify the server's certificate.
#DOCKER_TLS_VERIFY=false

## When to warn about HEAD pull requests failing.
## Auto means that it will warn when the registry is known to handle the requests and may rate limit pull requests (mainly docker.io).
#WATCHTOWER_WARN_ON_HEAD_FAILURE=auto

### https://containrrr.dev/watchtower/notifications/
## Controls the log level which is used for the notifications.
## If omitted, the default log level is info.
## Possible values are: panic, fatal, error, warn, info, debug or trace.
#WATCHTOWER_NOTIFICATIONS_LEVEL=info

## Custom hostname specified in subject/title.
## Useful to override the operating system hostname.
#WATCHTOWER_NOTIFICATIONS_HOSTNAME=${CONTAINER_HOSTNAME:-${HOSTNAME}}

## Delay before sending notifications expressed in seconds.
WATCHTOWER_NOTIFICATIONS_DELAY=2s

## Prefix to include in the title. Useful when running multiple watchtowers.
#WATCHTOWER_NOTIFICATION_TITLE_TAG=

## Do not pass the title param to notifications.
## This will not pass a dynamic title override to notification services.
## If no title is configured for the service, it will remove the title all together.
#WATCHTOWER_NOTIFICATION_SKIP_TITLE=false

## Enable output from logger:// shoutrrr service to stdout.
#WATCHTOWER_NOTIFICATION_LOG_STDOUT=false

## The shoutrrr service URL to be used.
## This option can also reference a file, in which case the contents of the file are used.
## Go to containrrr.dev/shoutrrr/v0.8/services/overview to learn more about the different service URLs you can use.
## You can define multiple services by space separating the URLs.
SMTPUSER=gmailer@gmail.com
SMTPPASS=app-pass-word
SMTPHOST=smtp.gmail.com
SMTPPORT=465
SMTPFROM=gmailer@gmail.com
SMTPFROMNAME="Display Name"
SMTPRCPT=recipient1@example.com,recipient2@example.com
SMTP_URL="smtp://${SMTPUSER}:${SMTPPASS}@${SMTPHOST}:${SMTPPORT}/?ToAddresses=${SMTPRCPT}&FromAddress=${SMTPFROM}&FromName=${SMTPFROMNAME}"
WATCHTOWER_NOTIFICATION_URL=${SMTP_URL}

## The template used for the message.
## The template is a Go template that either format a list of log entries or a notification.Data struct.
## Simple templates are used unless the notification-report flag is specified.
#WATCHTOWER_NOTIFICATION_TEMPLATE=

## Use the session report as the notification template data.
#WATCHTOWER_NOTIFICATION_REPORT=
